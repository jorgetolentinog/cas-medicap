service: cas-medicap-sync
useDotenv: true

plugins:
  - '@nearst/serverless-dynalite'
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x
  environment:
    SERVICE_NAME: ${self:service}
    EVENT_BUS_NAME: ${self:custom.cas-medicap.EventBusName}
    DYNAMODB_TABLE_MESSAGE: ${self:service}-${sls:stage}-message
  apiGateway:
    restApiId: ${self:custom.cas-medicap.ApiGatewayRestApiId}
    restApiRootResourceId: ${self:custom.cas-medicap.ApiGatewayRestApiRootResourceId}
  tracing:
    lambda: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
            - events:PutEvents
          Resource: '*'

custom:
  cas-medicap:
    ApiGatewayRestApiId:
      'Fn::ImportValue': cas-medicap-${sls:stage}-ApiGatewayRestApiId
    ApiGatewayRestApiRootResourceId:
      'Fn::ImportValue': cas-medicap-${sls:stage}-ApiGatewayRestApiRootResourceId
    EventBusName:
      'Fn::ImportValue': cas-medicap-${sls:stage}-EventBusName

functions:
  httpSyncPost:
    handler: ./src/application/functions/http-sync-post/index.handler
    events:
      - http:
          path: /sync
          method: post
          cors: true

resources:
  Resources:
    MessageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: _pk
            AttributeType: S
          - AttributeName: _gsi1pk
            AttributeType: S
          - AttributeName: _gsi1sk
            AttributeType: S
        KeySchema:
          - AttributeName: _pk
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: gsi1
            KeySchema:
              - AttributeName: _gsi1pk
                KeyType: HASH
              - AttributeName: _gsi1sk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE_MESSAGE}
