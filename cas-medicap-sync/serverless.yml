service: cas-medicap-sync
useDotenv: true

plugins:
  - '@nearst/serverless-dynalite'
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x
  environment:
    SERVICE_NAME: ${self:service}
    EVENT_BUS_NAME: ${self:custom.cas-medicap.EventBusName}
    DYNAMODB_TABLE_CALENDAR: ${self:service}-${sls:stage}-calendar
    DYNAMODB_TABLE_EXCEPTION: ${self:service}-${sls:stage}-exception
    DYNAMODB_TABLE_RELEASE: ${self:service}-${sls:stage}-release
    DYNAMODB_TABLE_BOOKING: ${self:service}-${sls:stage}-booking
    DYNAMODB_TABLE_PRE_BOOKING: ${self:service}-${sls:stage}-pre-booking
  apiGateway:
    restApiId: ${self:custom.cas-medicap.ApiGatewayRestApiId}
    restApiRootResourceId: ${self:custom.cas-medicap.ApiGatewayRestApiRootResourceId}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
            - events:PutEvents
          Resource: '*'

custom:
  cas-medicap:
    ApiGatewayRestApiId:
      'Fn::ImportValue': cas-medicap-${sls:stage}-ApiGatewayRestApiId
    ApiGatewayRestApiRootResourceId:
      'Fn::ImportValue': cas-medicap-${sls:stage}-ApiGatewayRestApiRootResourceId
    EventBusName:
      'Fn::ImportValue': cas-medicap-${sls:stage}-EventBusName

functions:
  httpSyncPost:
    handler: ./src/application/functions/http-sync-post/sync.handler
    events:
      - http:
          path: /sync
          method: post
          cors: true

resources:
  Resources:
    CalendarTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE_CALENDAR}

    ExceptionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE_EXCEPTION}

    ReleaseTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE_RELEASE}

    BookingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE_BOOKING}

    PreBookingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PRE_BOOKING}
